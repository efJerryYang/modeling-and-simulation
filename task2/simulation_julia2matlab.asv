NUM_SYSTEM = 100000;
TIME_STEP = 1;
LIFE_LIMIT = 200000;
STATE_NUM_NODE = 6;
k = 3;
w = 30000;
lambda_A = 1/5.90e4;
PA0 = exp(-lambda_A * TIME_STEP);
PEA1 = 0.20 * (1 - PA0);
PEA2 = 0.15 * (1 - PA0);
PEA3 = 0.65 * (1 - PA0);
lambda_B = 1/2.20e5;
PB0 = exp(-lambda_B * TIME_STEP);
PEB1 = 0.45 * (1 - PB0);
PEB2 = 0.55 * (1 - PB0);
main();
function main()
    avg_life_max = 0.0;
    avg_life_idx = 0;
    reliability_max = 0.0;
    reliability_idx = 0;

    for i = 3:5
        [avg_life_max, avg_life_idx, reliability_max, reliability_idx] = julia_main_varia(i, avg_life_max, avg_life_idx, reliability_max, reliability_idx);
    end

    fprintf("MTTF: %3d\t%16.4f\n", avg_life_idx, avg_life_max);
    fprintf("R(w): %3d\t%5.2f%%\n", reliability_idx, reliability_max * 100);
end

function [avg_life_max, avg_life_idx, reliability_max, reliability_idx] = julia_main_varia(NUM_NODE, avg_life_max, avg_life_idx, reliability_max, reliability_idx)
    gA = zeros(NUM_NODE);
    gB = zeros(NUM_NODE);
    gN = zeros(NUM_NODE);
    system_life = zeros(NUM_SYSTEM);
    lifeA = zeros(NUM_NODE);
    lifeB = zeros(NUM_NODE);
    reliability_counter = 0;

    for i = 1:NUM_SYSTEM
        system_life(i) = simulate_variable_timestep(NUM_NODE, gA, gB, gN, lifeA, lifeB);

        if system_life(i) > w
            reliability_counter = reliability_counter + 1;
        end

    end

    avg_life = mean(system_life);
    reliability = reliability_counter / NUM_SYSTEM;
    fprintf("NUM_NODE:%3d\tAvg: %12.6f\tReliability: %7.3f%%\n", NUM_NODE, avg_life, reliability * 100)
    avg_life_max = max(avg_life_max, avg_life);

    if avg_life_max == avg_life
        avg_life_idx = NUM_NODE;
    end

    reliability_max = max(reliability_max, reliability);

    if reliability_max == reliability
        reliability_idx = NUM_NODE;
    end

end

function [life_counter] = simulate_variable_timestep(NUM_NODE, gA, gB, gN)
    [gA, gB, gN] = initialize(NUM_NODE, gA, gB, gN);
    life_counter = 0;
    [gA, gB, lifeA, lifeB] = estimate_switch_state(NUM_NODE, gA, gB, gN);

    for i = 1:2 * NUM_NODE
        minA = find(lifeA);
        idxA = find(lifeA == minA);
        minB = find(lifeB);
        idxB = find(lifeB == minB);
        min_life = min(minA, minB);

        if min_life > LIFE_LIMIT
            life_counter = LIFE_LIMIT;
            break;
        end

        switch_tag = true;

        if min_life == minA
            switch_tag = true;
            idx = idxA;
        else
            switch_tag = false;
            idx = idxB;
        end

        [gN] = estimate_node_performance_state(NUM_NODE, gA, gB, gN, lifeA, lifeB, switch_tag, idx);

        if switch_tag
            lifeA(idxA) = +inf;
        else
            lifeB(idxB) = +inf;
        end

        Gsys = estimate_system_state(NUM_NODE, gN);

        if Gsys == 2 || Gsys == 3
            life_counter = min_life;
        else
            break;
        end

    end

end

function [gA, gB, gN] = initialize(NUM_NODE, gA, gB, gN)
    gA = gA * 0;
    gB = gB * 0;
    gN = gN * 0;
end

function [gA, gB, lifeA, lifeB] = estimate_switch_state(NUM_NODE, gA, gB, lifeA, lifeB)
    lifeA = exprnd(1 / lambda_A)
    lifeB = exprnd(1 / lambda_B)

    for i = 1:NUM_NODE
        tolA = rand * (1 - PA0)

        if tolA < PEA1
            gA(i) = 1;
        elseif tolA < PEA1 + PEA2
            gA(i) = 2;
        else
            gA(i) = 3;
        end

        tolB = rand * (1 - PB0)

        if tolB < PEB1
            gB(i) = 1;
        else
            gB(i) = 2;
        end

    end

end

function [gN] = estimate_node_performance_state(NUM_NODE, gA, gB, gN, lifeA, lifeB, switch_tag, idx)

    if switch_tag

        if gA(idx) == 1

            if lifeB(idx) != +inf
                gN(idx) = 1;
            elseif gB(idx) == 1
                gN(idx) = 5;
            elseif gB(idx) == 2
                gN(idx) = 1;
            end

        elseif gA(idx) == 2

            if lifeB(idx) != +inf
                gN(idx) = 2;
            elseif gB(idx) == 1
                gN(idx) = 3;
            elseif gB(idx) == 2
                gN(idx) = 4;
            end

        elseif gA(idx) == 3

            if lifeB(idx) != +inf
                gN(idx) = 4;
            elseif gB(idx) == 1
                gN(idx) = 4;
            elseif gB(idx) == 2
                gN(idx) = 4;
            end

        end

    else

        if gB(idx) == 1

            if lifeA(idx) != +inf
                gN(idx) = 3;
            elseif gA(idx) == 1
                gN(idx) = 5;
            elseif gA(idx) == 2
                gN(idx) = 3;
            elseif gA(idx) == 3
                gN(idx) = 4;
            end

        elseif gB(idx) == 2

            if lifeA(idx) != +inf
                gN(idx) = 1;
            elseif gA(idx) == 1
                gN(idx) = 1;
            elseif gA(idx) == 2
                gN(idx) = 4;
            elseif gA(idx) == 3
                gN(idx) = 4;
            end

        end

    end

end

function [Gsys] = estimate_system_state(NUM_NODE, gN)
    QPF = 0;
    QSO = 0;
    QDM = 0;
    QMO = 0;
    QDN = 0;
    QFB = 0;

    for i = 1:NUM_NODE

        if gN(i) == 0
            QPF = QPF + 1;
        elseif gN(i) == 1
            QSO = QSO + 1;
        elseif gN(i) == 2
            QDM = QDM + 1;
        elseif gN(i) == 3
            QMO = QMO + 1;
        elseif g(i) == 4
            QDN = QDN + 1;
        else
            QFB = QFB + 1;
        end

    end

    C1 = (QFB >= 1)
    C2 = (QMO >= 2)
    C3 = (QPF + QMO + QDM == 0)
    C4 = ((QPF + QSO + 1((QMO + QDM) > 0)) < k)
    C5 = (QFB == 0)
    C6 = (QMO == 1 && QPF + QSO >= k - 1)
    C7 = ((QMO == 0 && QPF >= 1 && QPF + QSO >= k) || (QMO == 0 && QPF == 0 && QDM >= 1 && QSO >= k - 1))
    C8 = (QFB + QMO == 0)
    C9 = (QPF >= 1 && (QPF + QSO == k - 1) && QDM >= 1)

    if C1 || C2 || C3 || C4
        Gsys = 1
    elseif C5 && (C6 || C7)
        Gsys = 2
    elseif C8 && C9
        cond = QDM / (QDM + QPF)

        if rand < cond
            Gsys = 3
        else
            Gsys = 4
        end

    end

end
